[{"/Users/pro/Desktop/projects/cv/src/index.js":"1","/Users/pro/Desktop/projects/cv/src/App.js":"2","/Users/pro/Desktop/projects/cv/src/components/Condition.js":"3","/Users/pro/Desktop/projects/cv/src/components/GeneralEdit.js":"4","/Users/pro/Desktop/projects/cv/src/components/General.js":"5","/Users/pro/Desktop/projects/cv/src/components/EduShow.js":"6","/Users/pro/Desktop/projects/cv/src/components/Education.js":"7","/Users/pro/Desktop/projects/cv/src/components/Practice.js":"8","/Users/pro/Desktop/projects/cv/src/components/PracticeShow.js":"9"},{"size":221,"mtime":1611504061125,"results":"10","hashOfConfig":"11"},{"size":332,"mtime":1612277505343,"results":"12","hashOfConfig":"11"},{"size":721,"mtime":1612277542244,"results":"13","hashOfConfig":"11"},{"size":1332,"mtime":1611845949561,"results":"14","hashOfConfig":"11"},{"size":2296,"mtime":1611845944925,"results":"15","hashOfConfig":"11"},{"size":988,"mtime":1612278059013,"results":"16","hashOfConfig":"11"},{"size":3487,"mtime":1612276065698,"results":"17","hashOfConfig":"11"},{"size":3956,"mtime":1612278937778,"results":"18","hashOfConfig":"11"},{"size":1002,"mtime":1612278245556,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"14lho2n",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/pro/Desktop/projects/cv/src/index.js",[],["40","41"],"/Users/pro/Desktop/projects/cv/src/App.js",[],"/Users/pro/Desktop/projects/cv/src/components/Condition.js",["42"],"/Users/pro/Desktop/projects/cv/src/components/GeneralEdit.js",[],"/Users/pro/Desktop/projects/cv/src/components/General.js",[],"/Users/pro/Desktop/projects/cv/src/components/EduShow.js",["43"],"/Users/pro/Desktop/projects/cv/src/components/Education.js",["44"],"import React, { Component } from 'react'\nimport EduShow from './EduShow'\n\nexport class Education extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: this.props.name,\n            title: this.props.title,\n            start: this.props.start,\n            end: this.props.end,\n            list: this.props.list,\n        }\n        this.addName = this.addName.bind(this);\n        this.addTitle = this.addTitle.bind(this);\n        this.addStart = this.addStart.bind(this);\n        this.addEnd = this.addEnd.bind(this);\n        this.addList = this.addList.bind(this);\n        this.editInfo = this.editInfo.bind(this);\n    }\n\n    editInfo(eName, eTitle, eStart, eEnd, Ekey) {\n        console.log(eName + \" deleting \"+ Ekey)\n        const list = Object.assign([],this.state.list);\n        list.splice(Ekey,1);\n        \n        this.setState({\n            list: list,\n            name: eName,\n            title: eTitle,\n            start: eStart,\n            end: eEnd,\n        })\n        console.log(this.state.list);\n    }\n\n    addList() {\n        console.log(\"i am adding to list\")\n        //every time we press add info with edushow added to the list and it just showed in the screen\n        this.setState({\n            list: this.state.list.concat(\n            { \n            name:this.state.name,\n            title:this.state.title,\n            start:this.state.start,\n            end:this.state.end}\n            ),\n            name: '',\n            title: '',\n            start: '',\n            end: '',\n        })\n    }\n\n    addName(e) {\n        this.setState({\n            name: e.target.value,\n        })\n    }\n\n    addTitle(e) {\n        this.setState({\n            title: e.target.value,\n        })\n    }\n\n    addStart(e) {\n        {console.log(e.target.value)}\n        this.setState({\n            start: e.target.value,\n        })\n    }\n\n    addEnd(e) {\n        this.setState({\n            end: e.target.value,\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Education</h2>\n                {\n                this.state.list.map((edu, index)=>{\n                    return (\n                        <EduShow \n                        edit={this.editInfo} \n                        listID={index} \n                        name={edu.name} \n                        title={edu.title} \n                        start={edu.start} \n                        end={edu.end} />\n                    )\n                })\n                }\n                <form action=\"#\"> \n                    <div>\n                    <label for=\"name\">School Name:</label>\n                    <input onChange={(e)=>this.addName(e)} type=\"text\" id=\"name\" value={this.state.name}/>\n                    </div>\n                    <div>\n                    <label for=\"title\">Title of study:</label>\n                    <input type=\"text\" onChange={e=>this.addTitle(e)} id=\"title\" value={this.state.title} />\n                    </div>\n                    <div>\n                    <label for=\"date\">Date of study:</label>\n                    <input type=\"date\" onChange={e=>this.addStart(e)} id=\"date\" value={this.state.start} />\n                    <input type=\"date\" onChange={e=>this.addEnd(e)} id=\"date\" value={this.state.end} />\n                    </div>\n                    <button type=\"submit\" onClick={this.addList}>Save</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Education\n","/Users/pro/Desktop/projects/cv/src/components/Practice.js",[],"/Users/pro/Desktop/projects/cv/src/components/PracticeShow.js",["45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":8,"column":5,"nodeType":"52","messageId":"53","endLine":11,"endColumn":6},{"ruleId":"50","severity":1,"message":"51","line":6,"column":5,"nodeType":"52","messageId":"53","endLine":8,"endColumn":6},{"ruleId":"54","severity":1,"message":"55","line":68,"column":9,"nodeType":"56","messageId":"57","endLine":68,"endColumn":38},{"ruleId":"50","severity":1,"message":"51","line":4,"column":5,"nodeType":"52","messageId":"53","endLine":6,"endColumn":6},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]